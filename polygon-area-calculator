class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def __str__(self):
        return f'Rectangle(width={self.width}, height={self.height})'
    
    def set_width(self, width):
        self.width = width
    
    def set_height(self, height):
        self.height = height

    def get_area(self):
        return self.width * self.height
    
    def get_perimeter(self):
        return 2 * self.width + 2 * self.height

    def get_diagonal(self):
        return (self.width ** 2 + self.height ** 2) ** 0.5
    
    def get_picture(self):
        if self.width < 50 and self.height < 50:
            return((('*' * self.width) + '\n') * self.height)
        else:
            return 'Too big for picture.'
            
    def get_amount_inside(self, shape):
        #as long as one of the two dimensions is smaller or same as its host counterpart, we can fit the other one as long as we can multiply it 
        
        #we need to take the integer of the number of times one of the guest dimensions fit in its correspondent host dimensions and then multiply this number by the amount of times the other one fits in the correspondent host dimension 
        return (self.width // shape.width) * (self.height // shape.height)
        
    
    
class Square(Rectangle):
    def __init__(self, side):
        self.side = side
        Rectangle.width = side 
        Rectangle.height = side 
    
    def __str__(self):
        return f"Square(side={self.width})"
    
    def set_side(self, side):
        self.width = side
        self.height = side

    def set_width(self, side):
        self.width = side
        self.height = side

    def set_height(self, side):
        self.height = side
        self.width = side
    
    
    




rect = Rectangle(10, 5)
print(rect.get_area())
rect.set_height(3)
print(rect.get_perimeter())
print(rect)
print(rect.get_picture())

sq = Square(9)
print(sq.get_area())
sq.set_height(5)
print(sq.get_diagonal())
print(sq)
print(sq.get_picture())
