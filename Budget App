class Category:
    def __init__(self, category):
        self.category = category
        self.ledger = []
        self.total = 0  # Initialize total attribute

    def deposit(self, amount, description=""):
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description=""):
        if self.check_funds(amount):
            self.ledger.append({"amount": -amount, "description": description})
            self.total += amount  # Update total with each withdrawal
            return True
        return False

    def get_balance(self):
        total = sum(item["amount"] for item in self.ledger)
        return total

    def transfer(self, amount, category):
        if self.check_funds(amount):
            self.withdraw(amount, f"Transfer to {category.category}")
            category.deposit(amount, f"Transfer from {self.category}")
            return True
        return False

    def check_funds(self, amount):
        return amount <= self.get_balance()

    def __str__(self):
        title = f"{self.category:*^30}\n"
        items = ""
        total = 0
        for item in self.ledger:
            items += f"{item['description'][:23]:23}" + f"{item['amount']:>7.2f}" + '\n'
            total += item['amount']
        output = title + items + "Total: " + str(total)
        return output

def create_spend_chart(categories):
    title = "Percentage spent by category\n"
    spends = []
    total_spent = sum(category.total for category in categories)  # Calculate total spent

    # Calculate percentage
    percentages = [int(category.total / total_spent * 100) // 10 * 10 for category in categories]

    # Create the chart
    chart = title
    for i in range(100, -1, -10):
        chart += str(i).rjust(3) + "| "
        for percentage in percentages:
            if percentage >= i:
                chart += "o  "
            else:
                chart += "   "
        chart += "\n"

    chart += "    -" + "---" * len(categories) + "\n"

    # Find the longest category name
    max_length = max(len(category.category) for category in categories)
    
    # Add category names
    for i in range(max_length):
        chart += "     "
        for category in categories:
            if i < len(category.category):
                chart += category.category[i] + "  "
            else:
                chart += "   "
        chart += "\n"

    return chart.rstrip("\n")

# Example Usage
food = Category("Food")
entertainment = Category("Entertainment")
business = Category("Business")

food.deposit(1000, "initial deposit")
food.withdraw(10.15, "groceries")
food.withdraw(15.89, "restaurant and more food for dessert")
food.withdraw(4.50, "coffee")

entertainment.deposit(1000, "initial deposit")
entertainment.withdraw(15, "movie ticket")
entertainment.withdraw(10, "popcorn")

business.deposit(1000, "initial deposit")
business.withdraw(50, "office supplies")

print(create_spend_chart([food, entertainment, business]))
